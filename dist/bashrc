#
# This file was automatically generated from '$HOME/Shared/setup/profile/generate.sh'
#

# If not running interactively, don't do anything
case $- in
  *i*) ;;
    *) return;;
esac

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# If not login shell, cd to home
shopt login_shell >/dev/null || cd ~

# -- BEGIN -- '$HOME/Shared/etc/profile.d/01-env.sh'
# ------------------------------------------------------------
FORCE_COLOR_PROMPT_WINDOWS=true
FANCY_PROMPT=true

UMASK_OVERRIDE=0002
# Space separated e.g. '/path/one /path/two /path/three ...'
UMASK_OVERRIDE_DIRS='/Users/Shared'
UMASK_OVERRIDE_EXCLUDE_DIRS='/Users/Shared/Data'

if [ -r "$HOME/.local/bin/bbeditor" ]; then
  export VISUAL="$HOME/.local/bin/bbeditor"
elif command -v code >/dev/null ; then
  export VISUAL="$(command -v code)"
elif command -v nano >/dev/null ; then
  export VISUAL="$(command -v nano)"
else
  export VISUAL="vi"
fi
export EDITOR="$VISUAL"
export GIT_EDITOR="$VISUAL"

# Enable colors in bash
export CLICOLOR=1
export LSCOLORS=GxBxCxDxexegedabagaced
# export GREP_OPTIONS='--color=auto' # Deprecated -- use option in alias
export GREP_COLORS='ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36'

# Hides the default login message
export BASH_SILENCE_DEPRECATION_WARNING=1

# https://specifications.freedesktop.org/basedir-spec/latest/
export XDG_DATA_HOME=${XDG_DATA_HOME:="$HOME/.local/share"}

export TRUE=true
export FALSE=false

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# set variable identifying the chroot you work in (used in the prompt below)
# (for debian-based systems only)
# if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
#     debian_chroot=$(cat /etc/debian_chroot)
# fi

# Load ~/.env if it exists
[ ! -r ~/.env ] || . ~/.env
# ------------------------------------------------------------
# -- END --

# -- BEGIN -- '$HOME/Shared/etc/profile.d/02-functions.sh'
# ------------------------------------------------------------
# Interactive Mode Check
is_interactive_mode() {
  # Ideally a redundant check since initial case statement should handle check for interactive mode
  echo $- | GREP_OPTIONS='' grep i >/dev/null
}

# Basic Output
output() { ! is_interactive_mode || printf "\033[0;2m%s\033[0m\n" "$@"; }
errcho() { >&2 echo $@; }

# Fancy Logging
logmsg() {
  local level="$1" msg="$2" label="${3:-""}" color_msg="${4:-$FALSE}" \
    label_code="${5:-""}" msg_code="${6:-""}" nc="\033[0m" label_color="" msg_color=""
  [ "${color_msg}" = "$TRUE" ] || color_msg="$FALSE"
  case $level in
    info) label_code="${label_code:-94}"; label="${label:-INFO}";;
    warn) label_code="${label_code:-93}"; label="${label:-WARN}";;
    success) label_code="${label_code:-92}"; label="${label:-SUCCESS}";;
    error) label_code="${label_code:-91}"; label="${label:-ERROR}";;
    *) label_code="${label_code:-0}"; label="${label:-$level}";;
  esac
  ! $color_msg || msg_code=$label_code
  label_color="\033[1;${label_code}m"; msg_color="\033[0;${msg_code}m"
  printf "${label_color}[ %s ]${nc} ${msg_color}%s${nc}\n" "$label" "$msg"
}
log_info() { logmsg info "$1"; }
log_warn() { logmsg warn "$1"; }
log_success() { logmsg success "$1"; }
log_error() { logmsg error "$1"; }

# Boolean Checks
is_bool() {
  case $1 in
    y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF|1|0) errcho $TRUE;;
    *) errcho $FALSE; return 1;;
  esac
}
is_true() {
  case $1 in
    y|Y|yes|Yes|YES|true|True|TRUE|on|On|ON|1) errcho $TRUE;;
    *) errcho $FALSE; return 1;;
  esac
}
is_false() {
  local err=0
  is_bool $1 2>/dev/null && ! is_true $1 || err=$?
  [ $err -gt 0 ] && errcho $FALSE && return $err || errcho $TRUE
}
is() { is_true $1 2>/dev/null || return $?; }

# Value Checks
equals() {
  local success="${FALSE:-false}"
  [ "$1" != "$2" ] || success="${TRUE:-true}" && errcho $success
  $success || return $?
}

# Shell System Checks
is_darwin() { uname -s | grep -i Darwin >/dev/null 2>&1 || return $?; }
is_linux() { uname -s | grep -i Linux >/dev/null 2>&1 || return $?; }
is_mingw64() { uname -s | grep -i MINGW64 >/dev/null 2>&1 || return $?; }
is_windows() { is_mingw64 || return $?; }

# Other Checks
is_debug() { is "${DEBUG:-$FALSE}" || return $?; }

# GNU Equivalents
__realpath() (
    local path=$1 file=''
    if [ ! -d "$path" ]; then
      file=/$(basename -- "$path")
      path=$(dirname -- "$path")
    fi
    path=$(cd -- "$path" && pwd)$file || return $?
    printf %s\\n "/${path#"${path%%[!/]*}"}"
)
command -v realpath >/dev/null || alias realpath='__realpath'
# ------------------------------------------------------------
# -- END --

# -- BEGIN -- '$HOME/Shared/etc/profile.d/03-prompt.sh'
# ------------------------------------------------------------
# define colors for easy reference
C_DEFAULT=$'\033[00m'; C_BOLD=$'\033[01m'; C_REVERSE=$'\033[07m'
C_RED=$'\033[00;31m'; C_GREEN=$'\033[00;32m'; C_YELLOW=$'\033[00;33m'
C_BLUE=$'\033[00;34m'; C_PURPLE=$'\033[00;35m'; C_CYAN=$'\033[00;36m'
C_RED_BOLD=$'\033[01;31m'; C_GREEN_BOLD=$'\033[01;32m'; C_YELLOW_BOLD=$'\033[01;33m'
C_BLUE_BOLD=$'\033[01;34m'; C_PURPLE_BOLD=$'\033[01;35m'; C_CYAN_BOLD=$'\033[01;36m'

# ðŸš¨
control_c() {
  local err="$?"
  printf "\nâ›” ${C_RED_BOLD}âœ—${C_DEFAULT} ${C_RED}(%s)${C_DEFAULT} ${C_BOLD}%s${C_DEFAULT} â›”" "$err" "Operation cancelled by user"
  # To fully exit the script, use 'exit' instead of 'return'
  return $err;
}
if is "${FANCY_PROMPT:-false}" ; then
  trap control_c SIGINT SIGTERM SIGHUP
fi

# load .env file
load_env() { [ ! -r "$HOME/.env" ] || . "$HOME/.env"; }

# get current git branch
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export -f parse_git_branch

# custom hostname parsing
parse_hostname() {
  local arg=${1:-1} replace=${2:-.}
  local count=$(hostname | grep -o '\.' | wc -l | xargs echo)
  [ $count -gt 1 ] || arg=1
  hostname | sed -E 's/\.lan|\.local$//' | cut -d. -f1-$arg | sed "s/\./$replace/g"
}
export -f parse_hostname

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes
if is "${FORCE_COLOR_PROMPT_WINDOWS:-$FALSE}" ; then
  ! is_windows || force_color_prompt=yes
fi

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

### Custom PS1 and PROMPT_COMMAND Handling
__ps1_color() {
  local _PS1_OPEN_ESC=$'\001'
  local _PS1_CLOSE_ESC=$'\002'
  local _PS1_FG="${1:-$C_DEFAULT}"
  echo "${_PS1_OPEN_ESC}${_PS1_FG}${_PS1_CLOSE_ESC}"
}

# display last exit code status
__exit_code_status() {
  local checkmark=âœ“ xkmark=âœ— checkmark_bold=âœ” xmark_bold=âœ˜ arrow_right=âžœ
  local code="${1:-0}" ps1_prompt_status=""
  if is "${FANCY_PROMPT:-false}" ; then
    if [ -z "$code" -o "$code" = "0" ]; then
      ps1_prompt_status="$(__ps1_color $C_GREEN)${checkmark_bold}$(__ps1_color) "
    else
      ps1_prompt_status="$(__ps1_color $C_RED_BOLD)${xmark_bold}$(__ps1_color) "
      # uncomment netx line to display exit the code
      #ps1_prompt_status+="$(__ps1_color $C_RED)($code)$(__ps1_color) "
    fi
    echo "$ps1_prompt_status"
  fi
}

__update_prompt_command() {
  local code=$? color_prompt="${1:-""}"
  local ps1_prompt_status="$(__exit_code_status $code)"
  set -a; load_env; set +a >/dev/null
}

PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}__update_prompt_command"

if is_linux ; then
  if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
  fi
else
  # Use 'parse_hostname' instead of '\h' for advacned customization
  if [ "$color_prompt" = "yes" ]; then
    PS1="\[\033[01;34m\]\u\[\033[0m\]@\[\033[01;32m\]\$(parse_hostname 10 '-')\[\033[00m\]:\[\033[01;34m\]\w\[\033[0;32m\]\$(parse_git_branch)\[\033[00m\]\$ "
  else
    PS1="\u@\$(parse_hostname 10 '-'):\w\$(parse_git_branch)\$ "
  fi
fi
PS1='$(code=${?##0};__exit_code_status $code)'$PS1
###

# cleanup
unset color_prompt force_color_prompt
# ------------------------------------------------------------
# -- END --

# -- BEGIN -- '$HOME/Shared/etc/profile.d/04-umask.sh'
# ------------------------------------------------------------
# Record the default umask value on the 1st run
UMASK_DEFAULT=0022 # $(builtin umask)
UMASK_OVERRIDE="${UMASK_OVERRIDE:-$UMASK_DEFAULT}"
UMASK_OVERRIDE_DIRS="${UMASK_OVERRIDE_DIRS:-""}"
UMASK_OVERRIDE_EXCLUDE_DIRS="${UMASK_OVERRIDE_EXCLUDE_DIRS:-""}"

__umask_default() {
  export UMASK=$UMASK_DEFAULT
}

__umask_override() {
  printf "\033[0;2m%s\033[0m: \033[91;2m%s\033[0m=>\033[92;2m%s\033[0m\n" "Overriding default umask" "$UMASK_DEFAULT" "$UMASK_OVERRIDE"
  export UMASK=$UMASK_OVERRIDE
}

__umask_hook() {
  if [ "$UMASK_OVERRIDE" != "$UMASK_DEFAULT" -a -n "$UMASK_OVERRIDE_DIRS" ]; then
    for d in $UMASK_OVERRIDE_DIRS; do
      if [ -d "$d" ]; then
        case $(realpath $PWD)/ in
          $d/*)
            for e in $UMASK_OVERRIDE_EXCLUDE_DIRS; do
              [ "$(realpath $PWD)" = "$(realpath $e)" ] && flag=true && break || flag=false
            done
            $flag && __umask_default || __umask_override
            ;;
          *) __umask_default;;
        esac
      fi
    done
  fi
  [ -z "$UMASK" ] || umask "$UMASK"
}

# Append `;` if PROMPT_COMMAND is not empty
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}__umask_hook"
# ------------------------------------------------------------
# -- END --

# -- BEGIN -- '$HOME/Shared/etc/profile.d/05-aliases.sh'
# ------------------------------------------------------------
# Standard
alias ls='ls -G --color=auto'
alias ll='ls -lahF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# Custom
alias containerfy='cd ~/Tools/containerfy'
alias pwdr='cd $(realpath)'
# ------------------------------------------------------------
# -- END --

if is_darwin || is_linux; then
  eval "$(/opt/homebrew/bin/brew shellenv)"

  export BASH_COMPLETION_COMPAT_DIR="$(brew --prefix)/etc/bash_completion.d"
  [ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ] && . "$(brew --prefix)/etc/profile.d/bash_completion.sh"
fi

# Display aliases (only output if interactive mode)
output "$(alias)"

[ ! -r "$(dirname $XDG_DATA_HOME)/bin" ] || export PATH="$(dirname $XDG_DATA_HOME)/bin:$PATH"
